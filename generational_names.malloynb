[{"kind":1,"language":"markdown","value":"# Top Names for Each Decade in Detail"},{"kind":2,"language":"malloy","value":"// Basic Data Model\nsource: names is table('duckdb:usa_names.parquet') + {\n  // Make the columns a little more readable\n  rename: \n    year_born is `year`\n    population is `number`\n\n  measure: \n    total_population is population.sum()\n    name_count is count(distinct name)\n    births_per_100k is floor(total_population/all(total_population) * 100000)\n    \n  dimension:\n    decade is floor(year_born/10) * 10\n}"},{"kind":1,"language":"markdown","value":"## Top Names in each generation"},{"kind":2,"language":"malloy","value":"query: top_names is names -> {\n  group_by: decade\n  nest: by_gender is {\n    group_by: gender\n    nest: by_name is {\n      group_by: name\n      aggregate: total_population\n      limit: 2\n    }\n  }\n}\nquery: -> top_names {limit: 3}"},{"kind":2,"language":"malloy","value":"query: top_flat is ->top_names ->{\n  project: decade, by_gender.gender, by_gender.by_name.name\n}\n\nquery: -> top_flat {limit: 10}"},{"kind":1,"language":"markdown","value":"## Look at these names over time and Location"},{"kind":2,"language":"malloy","value":"query: names -> {\n  join_one: top_flat is from(->top_flat) on name = top_flat.name\n  where: top_flat.decade != NULL\n  group_by: \n    tdecade is top_flat.decade\n    top_flat.gender\n    top_flat.name\n  aggregate: total_population\n  nest: by_decade_line_chart is {\n    group_by: decade\n    aggregate: \n      births_per_100k is floor(\n        total_population/exclude(total_population, name, gender, tdecade )\n        * 100000)\n  }\n  nest: by_state_shape_map is {\n    group_by: state\n    aggregate: births_per_100k is floor(\n      total_population/exclude(total_population, name, gender, tdecade )\n      * 100000)\n  }\n  order_by: tdecade desc, total_population desc\n}"}]