import "names.malloy"

// --
// Name: Preview the table
query: names->{ 
  project: *
  limit: 100
}

// --
// Name: 100 Most Popular Names
query: names->by_name + {limit: 100}

// --
// Name: 100 Most Popular Male Names
query: names->by_name + {
  where: gender = 'M'
  limit: 100
}

// --
// Name: 100 Most Popular Female Names since 2010
  query: names->by_name {
    where: gender = 'F' and `year` >= 2010
    limit: 100
  }

// --
// Name: Popular 'J' names in each state since 2010
query: names-> by_state + {
  where: decade = 2010
  where: name ~ r'^J'
  nest: male_names is by_name + {
    where: gender = 'M'
    limit: 10
  }
  nest: female_names is by_name + {
    where: gender = 'F'
    limit: 10
  }
  limit: 50
}

// --
// Name: Most Iconic names in NY.
query: names-> {
  group_by: name
  aggregate: 
    percent_ny is population {? state='NY'} / population
  having: population > 3000
}

// --
// Name: Most Iconic names per State.
query: names-> {
  group_by: state
  aggregate: population
  nest: names_list_detail is {
    group_by: name
    aggregate: 
      percent_in_state is population / exclude(population, state)
    limit: 20
    having: population > 1000
  }
  limit: 50
}

// --
// Name: Most Iconic names per Decade.
query: names-> {
  group_by: decade
  aggregate: population
  nest: names_list_detail is {
    where: gender = 'M'
    group_by: name
    aggregate: 
      percent_in_decade is population / exclude(population, decade)
    limit: 20
    having: population > 5000
  }
  nest: female_list_detail is {
    where: gender = 'F'
    group_by: name
    aggregate: 
      percent_in_decade is population / exclude(population, decade)
    limit: 20
    having: population > 5000
  }
  order_by: 1 
  limit: 50
}

// --
// Name: Resurgent Names top 2 decades (step 1)
// Find names and the top two decades by population
//
query: names -> {
  group_by: name
  aggregate: population
  nest: by_decade is {
    group_by: decade
    aggregate: percent_in_decade is population/all(population)
    order_by: 2 desc
    limit: 2
  }
}

// --
// Name: Resurgent Names top 2 decades (step 2)
// The first stage to the query finds the top two decades
//  (see the previous example)
// The second stage computes the difference between years
//  and the total percentage in both decades (good for filtering)
query: names -> {
  group_by: name
  aggregate: population
  nest: by_decade is {
    group_by: decade
    aggregate: percent_in_decade is population/all(population)
    order_by: 2 desc
    limit: 2
  }
}
-> {
  where: population > 3000 
  group_by: 
    name
    population
    years_apart is max(by_decade.decade)-min(by_decade.decade)
    total_percentage is by_decade.percent_in_decade.sum()
    max_percentage is max(by_decade.percent_in_decade)
    nest: by_decade is {
      project: by_decade.*
    }
  limit: 300
}

// Name: 'Mich' Dashboard
query: names-> {
  where: name ~ 'Mich%'
  nest: _dashboard is {
    group_by: name 
    aggregate: population
    nest: most_popular_decade is {
      group_by: decade
      aggregate: population
      limit: 1
    }
    nest: state_shape_map is {
      group_by: state
      aggregate: population
    }
    nest: by_decade_line_chart is by_decade
  }
}

// --
// Name: Error, this shold return no results 
query: names-> {
  group_by: state
  aggregate: population
  nest: names is {
    group_by: name
    aggregate: 
      percent_in_state is population / exclude(population, state)
    limit: 40
    having: population > 1000
  } 
}
-> {
    project: names.name, names.percent_in_state
    where: names.percent_in_state > 1
}
